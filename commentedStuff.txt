Feed.js




    
    // async function getPosts(db) {
    //     const postsCol = collection(db, 'posts');
    //     const postsSnapshot = await getDocs(postsCol);
    //     const postsList = postsSnapshot.docs.map(doc => ({
    //                          id:doc.id,
    //                          data:doc.data(),
    //                     }));
    //     return postsList;
    //   }

    //   async function postPosts(db) {
    //     const postsCol = collection(db, 'posts');
    //     const postsSnapshot = await getDocs(postsCol);
    //     const postsList = postsSnapshot.docs.map(doc => ({
    //                          id:doc.id,
    //                          data:doc.data(),
    //                     }));
    //     return postsList;
    //   }



// const sendPost=(e)=>{
//     e.preventDefault();
//     // postPosts(db);
//     const database= getDatabase();
//     set(ref(database,"posts"),{
//             name : "Mostafa Abdelraheem",
//             description: "this is a test",
//             message:input,
//             photoUrl:"",
//           })
    
// };
// The Firebase JavaScript SDK (v8.2.1) is now available.
//  For more details, see the Firebase JavaScript SDK release notes. 
//  To install the SDK, see Add Firebase to your JavaScript Project.







userSlice.js

import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counterAPI';




// Get a list of cities from your database
// async function getPosts(db) {
//     const postsCol = collection(db, 'posts');
//     const postsSnapshot = await getDocs(postsCol);
//     const postsList = postsSnapshot.docs.map(doc => doc.data());
//     return postsList;
//   }



// const getPosts=async(db)=>{
//     const postsCol = collection(db, 'posts');
//     const postsSnapshot = await getDocs(postsCol);
//     const postsList = postsSnapshot.docs.map((doc) =>({
//                  id:doc.id,
//                  data:doc.data(),
//             })
//             // doc.data());
//     return postsList;
// };



    useEffect(()=>{
         getPosts(db);
        // db.collection('posts').onSnapshot(snapshot=>(
        //     setPosts(snapshot.docs.map((doc)=>({
        //         id:doc.id,
        //         data:doc.data(),
        //     })))
        // ))

    },[])





  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },



const initialState = {
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
